lexer grammar AlgumaLexer;

PR_ALGORITMO: 'algoritmo';
PR_DECLARE: 'declare';
PR_LEIA: 'leia';
PR_ESCREVA: 'escreva';
PR_CASO: 'caso';
PR_SEJA: 'seja';
PR_SENAO: 'senao';
PR_PARA: 'para';
PR_ATE: 'ate';
PR_FACA: 'faca';
PR_ENQUANTO: 'enquanto';
PR_SE: 'se';
PR_E: 'e';
PR_ENTAO: 'entao';
PR_REGISTRO: 'registro';
PR_TIPO: 'tipo';
PR_PROCEDIMENTO: 'procedimento';
PR_VAR: 'var';
PR_FUNCAO: 'funcao';
PR_RETORNE: 'retorne';
PR_CONSTANTE: 'constante';
PR_VERDADEIRO: 'verdadeiro';
PR_FALSO: 'falso';
PR_NAO: 'nao';
PR_OU: 'ou';

PR_FIM_ALGORITMO: 'fim_algoritmo';
PR_FIM_CASO: 'fim_caso';
PR_FIM_PARA: 'fim_para';
PR_FIM_ENQUANTO: 'fim_enquanto';
PR_FIM_SE: 'fim_se';
PR_FIM_REGISTRO: 'fim_registro';
PR_FIM_PROCEDIMENTO: 'fim_procedimento';
PR_FIM_FUNCAO: 'fim_funcao';

PR_TIPO_LITERAL: 'literal';
PR_TIPO_INTEIRO: 'inteiro';
PR_TIPO_REAL: 'real';
PR_TIPO_LOGICO: 'logico';

DELIMITADOR_DOIS_PONTOS: ':';
DELIMITADOR_ABRE_PARENTESES: '(';
DELIMITADOR_FECHA_PARENTESES: ')';
DELIMITADOR_VIRGULA: ',';
DELIMITADOR_ABRE_COLCHETES: '[';
DELIMITADOR_FECHA_COLCHETES: ']';

OPERADOR_RANGE: '..';
OPERADOR_SOMA: '+';
OPERADOR_SUBTRACAO: '-';
OPERADOR_MULTIPLICACAO: '*';
OPERADOR_DIVISAO: '/';
OPERADOR_MOD: '%';
OPERADOR_MENOR: '<';
OPERADOR_MAIOR: '>';
OPERADOR_DIFERENTE: '<>';
OPERADOR_MAIOR_IGUAL: '>=';
OPERADOR_MENOR_IGUAL: '<=';
OPERADOR_IGUAL: '=';
OPERADOR_ENDERECO: '&';
OPERADOR_REGISTRO: '.';
OPERADOR_ATRIBUICAO: '<-';

TIPO_ENDERECO: '^';

/*
CMD_LEIA: 'leia' '(' '^'? IDENTIFICADOR (',' '^' IDENTIFICADOR)* ')';
CMD_ESCREVA: 'escreva' '(' EXPRESSAO (',' EXPRESSAO)* ')';
IDENTIFICADOR: IDENT ('.' IDENT)* DIMENSAO;
DIMENSAO: ('[' EXP_ARITMETICA ']')*;
EXP_ARITMETICA: TERMO (OP1 TERMO);
TERMO: FATOR (OP2 FATOR);
FATOR: PARCELA (OP3 PARCELA);
OP1: '+' | '-';
OP2: '*' | '/';
OP3: '%';
PARCELA: (OP_UNARIO? PARCELA_UNARIO) | PARCELA_NAO_UNARIO;
OP_UNARIO: '-';
PARCELA_UNARIO: ('^'? IDENTIFICADOR) | (IDENT '(' EXPRESSAO (',' EXPRESSAO)* ')') | NUM_INT | NUM_REAL | ('(' EXPRESSAO ')');
EXPRESSAO: TERMO_LOGICO (OP_LOGICO_1 TERMO_LOGICO)*;
OP_LOGICO_1: 'ou';
TERMO_LOGICO: FATOR_LOGICO (OP_LOGICO_2 FATOR_LOGICO)*;
OP_LOGICO_2: 'e';
FATOR_LOGICO: 'nao'? PARCELA_LOGICA;
PARCELA_LOGICA: 'verdadeiro' | 'falso' | EXP_RELACIONAL;
EXP_RELACIONAL: EXP_ARITMETICA (OP_RELACIONAL EXP_ARITMETICA)*;
OP_RELACIONAL: '=' | '<>' | '>=' | '<=' | '>' | '<';
PARCELA_NAO_UNARIO: ('&' IDENTIFICADOR) | CADEIA;
*/
CADEIA: '"' ~[\r\n]*? '"';

fragment LETRA: 'a'..'z' | 'A'..'Z';
NUM_INT: ('0'..'9')+;
NUM_REAL: NUM_INT '.' NUM_INT;

COMENTARIO: '{' ~[\r\n]*? '}' -> skip;
ESPACO_EM_BRANCO: [ \t\r\n]+ -> skip;

COMENTARIO_NAO_FECHADO: '{' ~[}]* [\r\n]+?;
CADEIA_NAO_FECHADA: '"' ~["]* [\r\n]+?;

IDENT: (LETRA|'_')(LETRA|NUM_INT|'_')*;